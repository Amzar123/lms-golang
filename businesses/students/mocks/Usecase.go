// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	students "mini-project/businesses/students"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: studentDomain
func (_m *Usecase) Create(studentDomain *students.Domain) students.Domain {
	ret := _m.Called(studentDomain)

	var r0 students.Domain
	if rf, ok := ret.Get(0).(func(*students.Domain) students.Domain); ok {
		r0 = rf(studentDomain)
	} else {
		r0 = ret.Get(0).(students.Domain)
	}

	return r0
}

// Login provides a mock function with given fields: studentDomain
func (_m *Usecase) Login(studentDomain *students.Domain) string {
	ret := _m.Called(studentDomain)

	var r0 string
	if rf, ok := ret.Get(0).(func(*students.Domain) string); ok {
		r0 = rf(studentDomain)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
